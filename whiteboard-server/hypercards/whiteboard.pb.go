// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marauder/proto/hypercard/whiteboard.proto

package hypercards

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Drawing_Color int32

const (
	Drawing_invisible Drawing_Color = 0
	Drawing_BLACK     Drawing_Color = 1
	Drawing_WHITE     Drawing_Color = 2
)

var Drawing_Color_name = map[int32]string{
	0: "invisible",
	1: "BLACK",
	2: "WHITE",
}

var Drawing_Color_value = map[string]int32{
	"invisible": 0,
	"BLACK":     1,
	"WHITE":     2,
}

func (x Drawing_Color) String() string {
	return proto.EnumName(Drawing_Color_name, int32(x))
}

func (Drawing_Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{5, 0}
}

type RecvScreenReq struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvScreenReq) Reset()         { *m = RecvScreenReq{} }
func (m *RecvScreenReq) String() string { return proto.CompactTextString(m) }
func (*RecvScreenReq) ProtoMessage()    {}
func (*RecvScreenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{0}
}

func (m *RecvScreenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvScreenReq.Unmarshal(m, b)
}
func (m *RecvScreenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvScreenReq.Marshal(b, m, deterministic)
}
func (m *RecvScreenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvScreenReq.Merge(m, src)
}
func (m *RecvScreenReq) XXX_Size() int {
	return xxx_messageInfo_RecvScreenReq.Size(m)
}
func (m *RecvScreenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvScreenReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecvScreenReq proto.InternalMessageInfo

func (m *RecvScreenReq) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type RecvScreenRep struct {
	PngCanvas            []byte   `protobuf:"bytes,1,opt,name=png_canvas,json=pngCanvas,proto3" json:"png_canvas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvScreenRep) Reset()         { *m = RecvScreenRep{} }
func (m *RecvScreenRep) String() string { return proto.CompactTextString(m) }
func (*RecvScreenRep) ProtoMessage()    {}
func (*RecvScreenRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{1}
}

func (m *RecvScreenRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvScreenRep.Unmarshal(m, b)
}
func (m *RecvScreenRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvScreenRep.Marshal(b, m, deterministic)
}
func (m *RecvScreenRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvScreenRep.Merge(m, src)
}
func (m *RecvScreenRep) XXX_Size() int {
	return xxx_messageInfo_RecvScreenRep.Size(m)
}
func (m *RecvScreenRep) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvScreenRep.DiscardUnknown(m)
}

var xxx_messageInfo_RecvScreenRep proto.InternalMessageInfo

func (m *RecvScreenRep) GetPngCanvas() []byte {
	if m != nil {
		return m.PngCanvas
	}
	return nil
}

type SendScreenReq struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ScreenPng            []byte   `protobuf:"bytes,2,opt,name=screen_png,json=screenPng,proto3" json:"screen_png,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendScreenReq) Reset()         { *m = SendScreenReq{} }
func (m *SendScreenReq) String() string { return proto.CompactTextString(m) }
func (*SendScreenReq) ProtoMessage()    {}
func (*SendScreenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{2}
}

func (m *SendScreenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendScreenReq.Unmarshal(m, b)
}
func (m *SendScreenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendScreenReq.Marshal(b, m, deterministic)
}
func (m *SendScreenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendScreenReq.Merge(m, src)
}
func (m *SendScreenReq) XXX_Size() int {
	return xxx_messageInfo_SendScreenReq.Size(m)
}
func (m *SendScreenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendScreenReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendScreenReq proto.InternalMessageInfo

func (m *SendScreenReq) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *SendScreenReq) GetScreenPng() []byte {
	if m != nil {
		return m.ScreenPng
	}
	return nil
}

type SendScreenRep struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendScreenRep) Reset()         { *m = SendScreenRep{} }
func (m *SendScreenRep) String() string { return proto.CompactTextString(m) }
func (*SendScreenRep) ProtoMessage()    {}
func (*SendScreenRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{3}
}

func (m *SendScreenRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendScreenRep.Unmarshal(m, b)
}
func (m *SendScreenRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendScreenRep.Marshal(b, m, deterministic)
}
func (m *SendScreenRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendScreenRep.Merge(m, src)
}
func (m *SendScreenRep) XXX_Size() int {
	return xxx_messageInfo_SendScreenRep.Size(m)
}
func (m *SendScreenRep) XXX_DiscardUnknown() {
	xxx_messageInfo_SendScreenRep.DiscardUnknown(m)
}

var xxx_messageInfo_SendScreenRep proto.InternalMessageInfo

type Event struct {
	CreatedAt int64  `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ByUserId  string `protobuf:"bytes,2,opt,name=by_user_id,json=byUserId,proto3" json:"by_user_id,omitempty"`
	InRoomId  string `protobuf:"bytes,3,opt,name=in_room_id,json=inRoomId,proto3" json:"in_room_id,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_Drawing
	//	*Event_UserLeftTheRoom
	//	*Event_UserJoinedTheRoom
	//	*Event_UsersInTheRoom
	Event                isEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{4}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Event) GetByUserId() string {
	if m != nil {
		return m.ByUserId
	}
	return ""
}

func (m *Event) GetInRoomId() string {
	if m != nil {
		return m.InRoomId
	}
	return ""
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Drawing struct {
	Drawing *Drawing `protobuf:"bytes,4,opt,name=drawing,proto3,oneof"`
}

type Event_UserLeftTheRoom struct {
	UserLeftTheRoom bool `protobuf:"varint,5,opt,name=user_left_the_room,json=userLeftTheRoom,proto3,oneof"`
}

type Event_UserJoinedTheRoom struct {
	UserJoinedTheRoom bool `protobuf:"varint,6,opt,name=user_joined_the_room,json=userJoinedTheRoom,proto3,oneof"`
}

type Event_UsersInTheRoom struct {
	UsersInTheRoom uint32 `protobuf:"varint,7,opt,name=users_in_the_room,json=usersInTheRoom,proto3,oneof"`
}

func (*Event_Drawing) isEvent_Event() {}

func (*Event_UserLeftTheRoom) isEvent_Event() {}

func (*Event_UserJoinedTheRoom) isEvent_Event() {}

func (*Event_UsersInTheRoom) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetDrawing() *Drawing {
	if x, ok := m.GetEvent().(*Event_Drawing); ok {
		return x.Drawing
	}
	return nil
}

func (m *Event) GetUserLeftTheRoom() bool {
	if x, ok := m.GetEvent().(*Event_UserLeftTheRoom); ok {
		return x.UserLeftTheRoom
	}
	return false
}

func (m *Event) GetUserJoinedTheRoom() bool {
	if x, ok := m.GetEvent().(*Event_UserJoinedTheRoom); ok {
		return x.UserJoinedTheRoom
	}
	return false
}

func (m *Event) GetUsersInTheRoom() uint32 {
	if x, ok := m.GetEvent().(*Event_UsersInTheRoom); ok {
		return x.UsersInTheRoom
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Drawing)(nil),
		(*Event_UserLeftTheRoom)(nil),
		(*Event_UserJoinedTheRoom)(nil),
		(*Event_UsersInTheRoom)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Drawing:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Drawing); err != nil {
			return err
		}
	case *Event_UserLeftTheRoom:
		t := uint64(0)
		if x.UserLeftTheRoom {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Event_UserJoinedTheRoom:
		t := uint64(0)
		if x.UserJoinedTheRoom {
			t = 1
		}
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Event_UsersInTheRoom:
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.UsersInTheRoom))
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 4: // event.drawing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Drawing)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Drawing{msg}
		return true, err
	case 5: // event.user_left_the_room
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Event_UserLeftTheRoom{x != 0}
		return true, err
	case 6: // event.user_joined_the_room
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Event_UserJoinedTheRoom{x != 0}
		return true, err
	case 7: // event.users_in_the_room
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Event_UsersInTheRoom{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Drawing:
		s := proto.Size(x.Drawing)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_UserLeftTheRoom:
		n += 1 // tag and wire
		n += 1
	case *Event_UserJoinedTheRoom:
		n += 1 // tag and wire
		n += 1
	case *Event_UsersInTheRoom:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.UsersInTheRoom))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Drawing struct {
	Xs                   []float32     `protobuf:"fixed32,1,rep,packed,name=xs,proto3" json:"xs,omitempty"`
	Ys                   []float32     `protobuf:"fixed32,2,rep,packed,name=ys,proto3" json:"ys,omitempty"`
	Pressures            []int32       `protobuf:"varint,3,rep,packed,name=pressures,proto3" json:"pressures,omitempty"`
	Widths               []uint32      `protobuf:"varint,4,rep,packed,name=widths,proto3" json:"widths,omitempty"`
	Color                Drawing_Color `protobuf:"varint,5,opt,name=color,proto3,enum=hypercards.Drawing_Color" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Drawing) Reset()         { *m = Drawing{} }
func (m *Drawing) String() string { return proto.CompactTextString(m) }
func (*Drawing) ProtoMessage()    {}
func (*Drawing) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{5}
}

func (m *Drawing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Drawing.Unmarshal(m, b)
}
func (m *Drawing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Drawing.Marshal(b, m, deterministic)
}
func (m *Drawing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Drawing.Merge(m, src)
}
func (m *Drawing) XXX_Size() int {
	return xxx_messageInfo_Drawing.Size(m)
}
func (m *Drawing) XXX_DiscardUnknown() {
	xxx_messageInfo_Drawing.DiscardUnknown(m)
}

var xxx_messageInfo_Drawing proto.InternalMessageInfo

func (m *Drawing) GetXs() []float32 {
	if m != nil {
		return m.Xs
	}
	return nil
}

func (m *Drawing) GetYs() []float32 {
	if m != nil {
		return m.Ys
	}
	return nil
}

func (m *Drawing) GetPressures() []int32 {
	if m != nil {
		return m.Pressures
	}
	return nil
}

func (m *Drawing) GetWidths() []uint32 {
	if m != nil {
		return m.Widths
	}
	return nil
}

func (m *Drawing) GetColor() Drawing_Color {
	if m != nil {
		return m.Color
	}
	return Drawing_invisible
}

type RecvEventsReq struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecvEventsReq) Reset()         { *m = RecvEventsReq{} }
func (m *RecvEventsReq) String() string { return proto.CompactTextString(m) }
func (*RecvEventsReq) ProtoMessage()    {}
func (*RecvEventsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{6}
}

func (m *RecvEventsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecvEventsReq.Unmarshal(m, b)
}
func (m *RecvEventsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecvEventsReq.Marshal(b, m, deterministic)
}
func (m *RecvEventsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvEventsReq.Merge(m, src)
}
func (m *RecvEventsReq) XXX_Size() int {
	return xxx_messageInfo_RecvEventsReq.Size(m)
}
func (m *RecvEventsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvEventsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecvEventsReq proto.InternalMessageInfo

func (m *RecvEventsReq) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type SendEventReq struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	RoomIds              []string `protobuf:"bytes,2,rep,name=room_ids,json=roomIds,proto3" json:"room_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendEventReq) Reset()         { *m = SendEventReq{} }
func (m *SendEventReq) String() string { return proto.CompactTextString(m) }
func (*SendEventReq) ProtoMessage()    {}
func (*SendEventReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{7}
}

func (m *SendEventReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendEventReq.Unmarshal(m, b)
}
func (m *SendEventReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendEventReq.Marshal(b, m, deterministic)
}
func (m *SendEventReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEventReq.Merge(m, src)
}
func (m *SendEventReq) XXX_Size() int {
	return xxx_messageInfo_SendEventReq.Size(m)
}
func (m *SendEventReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEventReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendEventReq proto.InternalMessageInfo

func (m *SendEventReq) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SendEventReq) GetRoomIds() []string {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

type SendEventRep struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendEventRep) Reset()         { *m = SendEventRep{} }
func (m *SendEventRep) String() string { return proto.CompactTextString(m) }
func (*SendEventRep) ProtoMessage()    {}
func (*SendEventRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{8}
}

func (m *SendEventRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendEventRep.Unmarshal(m, b)
}
func (m *SendEventRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendEventRep.Marshal(b, m, deterministic)
}
func (m *SendEventRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEventRep.Merge(m, src)
}
func (m *SendEventRep) XXX_Size() int {
	return xxx_messageInfo_SendEventRep.Size(m)
}
func (m *SendEventRep) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEventRep.DiscardUnknown(m)
}

var xxx_messageInfo_SendEventRep proto.InternalMessageInfo

type ListRoomsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoomsReq) Reset()         { *m = ListRoomsReq{} }
func (m *ListRoomsReq) String() string { return proto.CompactTextString(m) }
func (*ListRoomsReq) ProtoMessage()    {}
func (*ListRoomsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{9}
}

func (m *ListRoomsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoomsReq.Unmarshal(m, b)
}
func (m *ListRoomsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoomsReq.Marshal(b, m, deterministic)
}
func (m *ListRoomsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomsReq.Merge(m, src)
}
func (m *ListRoomsReq) XXX_Size() int {
	return xxx_messageInfo_ListRoomsReq.Size(m)
}
func (m *ListRoomsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomsReq proto.InternalMessageInfo

type ListRoomsRep struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoomsRep) Reset()         { *m = ListRoomsRep{} }
func (m *ListRoomsRep) String() string { return proto.CompactTextString(m) }
func (*ListRoomsRep) ProtoMessage()    {}
func (*ListRoomsRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{10}
}

func (m *ListRoomsRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoomsRep.Unmarshal(m, b)
}
func (m *ListRoomsRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoomsRep.Marshal(b, m, deterministic)
}
func (m *ListRoomsRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomsRep.Merge(m, src)
}
func (m *ListRoomsRep) XXX_Size() int {
	return xxx_messageInfo_ListRoomsRep.Size(m)
}
func (m *ListRoomsRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomsRep.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomsRep proto.InternalMessageInfo

func (m *ListRoomsRep) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type RoomMember struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomMember) Reset()         { *m = RoomMember{} }
func (m *RoomMember) String() string { return proto.CompactTextString(m) }
func (*RoomMember) ProtoMessage()    {}
func (*RoomMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{11}
}

func (m *RoomMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomMember.Unmarshal(m, b)
}
func (m *RoomMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomMember.Marshal(b, m, deterministic)
}
func (m *RoomMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMember.Merge(m, src)
}
func (m *RoomMember) XXX_Size() int {
	return xxx_messageInfo_RoomMember.Size(m)
}
func (m *RoomMember) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMember.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMember proto.InternalMessageInfo

type ListRoomMembersReq struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoomMembersReq) Reset()         { *m = ListRoomMembersReq{} }
func (m *ListRoomMembersReq) String() string { return proto.CompactTextString(m) }
func (*ListRoomMembersReq) ProtoMessage()    {}
func (*ListRoomMembersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{12}
}

func (m *ListRoomMembersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoomMembersReq.Unmarshal(m, b)
}
func (m *ListRoomMembersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoomMembersReq.Marshal(b, m, deterministic)
}
func (m *ListRoomMembersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomMembersReq.Merge(m, src)
}
func (m *ListRoomMembersReq) XXX_Size() int {
	return xxx_messageInfo_ListRoomMembersReq.Size(m)
}
func (m *ListRoomMembersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomMembersReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomMembersReq proto.InternalMessageInfo

func (m *ListRoomMembersReq) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type ListRoomMembersRep struct {
	Members              []*RoomMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRoomMembersRep) Reset()         { *m = ListRoomMembersRep{} }
func (m *ListRoomMembersRep) String() string { return proto.CompactTextString(m) }
func (*ListRoomMembersRep) ProtoMessage()    {}
func (*ListRoomMembersRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb18137c8f4360, []int{13}
}

func (m *ListRoomMembersRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoomMembersRep.Unmarshal(m, b)
}
func (m *ListRoomMembersRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoomMembersRep.Marshal(b, m, deterministic)
}
func (m *ListRoomMembersRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomMembersRep.Merge(m, src)
}
func (m *ListRoomMembersRep) XXX_Size() int {
	return xxx_messageInfo_ListRoomMembersRep.Size(m)
}
func (m *ListRoomMembersRep) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomMembersRep.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomMembersRep proto.InternalMessageInfo

func (m *ListRoomMembersRep) GetMembers() []*RoomMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterEnum("hypercards.Drawing_Color", Drawing_Color_name, Drawing_Color_value)
	proto.RegisterType((*RecvScreenReq)(nil), "hypercards.RecvScreenReq")
	proto.RegisterType((*RecvScreenRep)(nil), "hypercards.RecvScreenRep")
	proto.RegisterType((*SendScreenReq)(nil), "hypercards.SendScreenReq")
	proto.RegisterType((*SendScreenRep)(nil), "hypercards.SendScreenRep")
	proto.RegisterType((*Event)(nil), "hypercards.Event")
	proto.RegisterType((*Drawing)(nil), "hypercards.Drawing")
	proto.RegisterType((*RecvEventsReq)(nil), "hypercards.RecvEventsReq")
	proto.RegisterType((*SendEventReq)(nil), "hypercards.SendEventReq")
	proto.RegisterType((*SendEventRep)(nil), "hypercards.SendEventRep")
	proto.RegisterType((*ListRoomsReq)(nil), "hypercards.ListRoomsReq")
	proto.RegisterType((*ListRoomsRep)(nil), "hypercards.ListRoomsRep")
	proto.RegisterType((*RoomMember)(nil), "hypercards.RoomMember")
	proto.RegisterType((*ListRoomMembersReq)(nil), "hypercards.ListRoomMembersReq")
	proto.RegisterType((*ListRoomMembersRep)(nil), "hypercards.ListRoomMembersRep")
}

func init() {
	proto.RegisterFile("marauder/proto/hypercard/whiteboard.proto", fileDescriptor_eefb18137c8f4360)
}

var fileDescriptor_eefb18137c8f4360 = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0xda, 0x4a,
	0x10, 0xb6, 0x4d, 0x80, 0x78, 0x12, 0x48, 0xb2, 0xe7, 0x28, 0xc7, 0x41, 0x39, 0x47, 0x68, 0x6f,
	0x8e, 0xa3, 0x36, 0x90, 0xd2, 0xab, 0xde, 0x54, 0xca, 0x5f, 0x0b, 0x6d, 0x2a, 0x55, 0x4b, 0xaa,
	0x5c, 0x5a, 0x06, 0x6f, 0xc0, 0x55, 0x58, 0x6f, 0x77, 0x1d, 0x12, 0x9e, 0xa5, 0x0f, 0xd0, 0x8b,
	0xbe, 0x43, 0x9f, 0xad, 0xda, 0x5d, 0x83, 0x71, 0x0b, 0xe9, 0x1d, 0x33, 0xdf, 0x37, 0xdf, 0x8c,
	0xbf, 0x59, 0x06, 0x8e, 0x26, 0xa1, 0x08, 0xef, 0x23, 0x2a, 0xda, 0x5c, 0x24, 0x69, 0xd2, 0x1e,
	0xcf, 0x38, 0x15, 0xc3, 0x50, 0x44, 0xed, 0x87, 0x71, 0x9c, 0xd2, 0x41, 0x12, 0x8a, 0xa8, 0xa5,
	0x21, 0x04, 0x0b, 0x4c, 0x62, 0x1f, 0x6a, 0x84, 0x0e, 0xa7, 0xfd, 0xa1, 0xa0, 0x94, 0x11, 0xfa,
	0x05, 0xfd, 0x03, 0x55, 0x91, 0x24, 0x93, 0x20, 0x8e, 0x3c, 0xbb, 0x69, 0xfb, 0x2e, 0xa9, 0xa8,
	0xb0, 0x17, 0xe1, 0x56, 0x91, 0xc9, 0xd1, 0xbf, 0x00, 0x9c, 0x8d, 0x82, 0x61, 0xc8, 0xa6, 0xa1,
	0xd4, 0xe4, 0x6d, 0xe2, 0x72, 0x36, 0x3a, 0xd7, 0x09, 0xfc, 0x16, 0x6a, 0x7d, 0xca, 0xa2, 0x3f,
	0x2b, 0x2b, 0x21, 0xa9, 0x59, 0x01, 0x67, 0x23, 0xcf, 0x31, 0x42, 0x26, 0xf3, 0x91, 0x8d, 0xf0,
	0x4e, 0x51, 0x88, 0xe3, 0xef, 0x0e, 0x94, 0x2f, 0xa7, 0x94, 0xa5, 0xaa, 0x72, 0x28, 0x68, 0x98,
	0xd2, 0x28, 0x08, 0x53, 0xad, 0x5a, 0x22, 0x6e, 0x96, 0x39, 0x4d, 0xd1, 0x21, 0xc0, 0x60, 0x16,
	0xdc, 0x4b, 0x2a, 0x54, 0x53, 0x47, 0x37, 0xdd, 0x1c, 0xcc, 0x3e, 0x49, 0x2a, 0x7a, 0x91, 0x42,
	0x63, 0x16, 0xcc, 0x47, 0x2a, 0x19, 0x34, 0x66, 0xc4, 0x0c, 0xd5, 0x86, 0x6a, 0x24, 0xc2, 0x87,
	0x98, 0x8d, 0xbc, 0x8d, 0xa6, 0xed, 0x6f, 0x75, 0xfe, 0x6a, 0xe5, 0xb6, 0xb5, 0x2e, 0x0c, 0xd4,
	0xb5, 0xc8, 0x9c, 0x85, 0x8e, 0x01, 0xe9, 0x4e, 0x77, 0xf4, 0x36, 0x0d, 0xd2, 0x31, 0xd5, 0xca,
	0x5e, 0xb9, 0x69, 0xfb, 0x9b, 0x5d, 0x8b, 0xec, 0x28, 0xec, 0x8a, 0xde, 0xa6, 0xd7, 0x63, 0xaa,
	0x3a, 0xa0, 0x17, 0xf0, 0xb7, 0xa6, 0x7f, 0x4e, 0x62, 0x46, 0xa3, 0xbc, 0xa0, 0x92, 0x15, 0xec,
	0x29, 0xf4, 0x9d, 0x06, 0xe7, 0x25, 0xcf, 0x40, 0x27, 0x65, 0x10, 0xb3, 0x9c, 0x5f, 0x6d, 0xda,
	0x7e, 0xad, 0x6b, 0x91, 0xba, 0x86, 0x7a, 0x2c, 0x23, 0x9f, 0x55, 0xa1, 0x4c, 0x95, 0x47, 0xf8,
	0x87, 0x0d, 0xd5, 0x6c, 0x5c, 0x54, 0x07, 0xe7, 0x51, 0xad, 0xaa, 0xe4, 0x3b, 0xc4, 0x79, 0x94,
	0x2a, 0x9e, 0x49, 0xcf, 0x31, 0xf1, 0x4c, 0xa2, 0x43, 0x70, 0xb9, 0xa0, 0x52, 0xde, 0x0b, 0x2a,
	0xbd, 0x52, 0xb3, 0xe4, 0x97, 0x49, 0x9e, 0x40, 0xfb, 0x50, 0x79, 0x88, 0xa3, 0x74, 0x2c, 0xbd,
	0x8d, 0x66, 0xc9, 0xaf, 0x91, 0x2c, 0x42, 0x6d, 0x28, 0x0f, 0x93, 0xbb, 0x44, 0xe8, 0x8f, 0xad,
	0x77, 0x0e, 0x56, 0x18, 0xd5, 0x3a, 0x57, 0x04, 0x62, 0x78, 0xf8, 0x39, 0x94, 0x75, 0x8c, 0x6a,
	0xe0, 0xc6, 0x6c, 0x1a, 0xcb, 0x78, 0x70, 0x47, 0x77, 0x2d, 0xe4, 0x42, 0xf9, 0xec, 0xea, 0xf4,
	0xfc, 0xfd, 0xae, 0xad, 0x7e, 0xde, 0x74, 0x7b, 0xd7, 0x97, 0xbb, 0xce, 0xfc, 0x89, 0xea, 0x8d,
	0xcb, 0x27, 0x9f, 0x28, 0x81, 0x6d, 0xf5, 0x52, 0x34, 0x53, 0x11, 0xff, 0xcf, 0x3c, 0xd0, 0xb4,
	0xad, 0xce, 0xde, 0xf2, 0x60, 0x86, 0x64, 0x70, 0x74, 0x00, 0x9b, 0x99, 0xa2, 0x71, 0xc3, 0x25,
	0x55, 0x23, 0x29, 0x71, 0xbd, 0xa0, 0xc9, 0x55, 0x7c, 0x15, 0xcb, 0x54, 0x79, 0xac, 0x86, 0xc1,
	0xaf, 0x0a, 0x31, 0x47, 0x47, 0x50, 0xd1, 0x9a, 0xc6, 0xe6, 0x95, 0x4d, 0x33, 0x02, 0xde, 0x06,
	0x50, 0x65, 0x1f, 0xe8, 0x64, 0x40, 0x05, 0x3e, 0x06, 0x34, 0x17, 0x32, 0x99, 0xa7, 0xbf, 0xf5,
	0xcd, 0x0a, 0x3a, 0x47, 0x27, 0x50, 0x9d, 0x98, 0x28, 0x6b, 0xbf, 0xbf, 0xdc, 0x3e, 0x27, 0x93,
	0x39, 0xad, 0xf3, 0xcd, 0x01, 0xb8, 0x59, 0x5c, 0x08, 0xf4, 0x1a, 0x20, 0x37, 0x1b, 0x15, 0x56,
	0x59, 0x58, 0x42, 0xe3, 0xf7, 0xef, 0xc2, 0xd6, 0x89, 0x8d, 0x4e, 0xc1, 0x5d, 0xd8, 0x85, 0xbc,
	0x65, 0xce, 0xf2, 0x66, 0x1a, 0xeb, 0x10, 0x8e, 0x2d, 0x25, 0xb1, 0x70, 0xb4, 0x28, 0xb1, 0x6c,
	0x7c, 0x63, 0x1d, 0xa2, 0x24, 0xfa, 0xb0, 0xf3, 0x8b, 0x39, 0xe8, 0xbf, 0x55, 0xf4, 0xdc, 0xe8,
	0xc6, 0xd3, 0x38, 0xc7, 0x56, 0xe7, 0xab, 0x0d, 0x35, 0x73, 0x84, 0xfa, 0xe3, 0x50, 0xa8, 0xbf,
	0xd3, 0x05, 0x40, 0x7e, 0x99, 0x8a, 0x66, 0x15, 0x4e, 0x5f, 0x63, 0x2d, 0xa4, 0x86, 0xbd, 0x30,
	0x96, 0xaf, 0x52, 0x29, 0x9c, 0xe6, 0xc6, 0x5a, 0x88, 0x63, 0x6b, 0x50, 0xd1, 0xb7, 0xfd, 0xe5,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xc3, 0x39, 0xc2, 0x08, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WhiteboardClient is the client API for Whiteboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WhiteboardClient interface {
	// RecvEvents listens to new events from others for a given room.
	// Events are sent using the SendEvent call.
	// A user never receives their own events.
	// When stream is closed, other users of the room should receive a disconnection event.
	RecvEvents(ctx context.Context, in *RecvEventsReq, opts ...grpc.CallOption) (Whiteboard_RecvEventsClient, error)
	// SendEvent publishes a user's event, which then gets routed to zero or more rooms.
	SendEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRep, error)
	// ListRooms returns a paginated list of rooms.
	ListRooms(ctx context.Context, in *ListRoomsReq, opts ...grpc.CallOption) (*ListRoomsRep, error)
	// ListRoomMembers returns a paginated list of room members.
	ListRoomMembers(ctx context.Context, in *ListRoomMembersReq, opts ...grpc.CallOption) (*ListRoomMembersRep, error)
}

type whiteboardClient struct {
	cc *grpc.ClientConn
}

func NewWhiteboardClient(cc *grpc.ClientConn) WhiteboardClient {
	return &whiteboardClient{cc}
}

func (c *whiteboardClient) RecvEvents(ctx context.Context, in *RecvEventsReq, opts ...grpc.CallOption) (Whiteboard_RecvEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Whiteboard_serviceDesc.Streams[0], "/hypercards.Whiteboard/RecvEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &whiteboardRecvEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Whiteboard_RecvEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type whiteboardRecvEventsClient struct {
	grpc.ClientStream
}

func (x *whiteboardRecvEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *whiteboardClient) SendEvent(ctx context.Context, in *SendEventReq, opts ...grpc.CallOption) (*SendEventRep, error) {
	out := new(SendEventRep)
	err := c.cc.Invoke(ctx, "/hypercards.Whiteboard/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) ListRooms(ctx context.Context, in *ListRoomsReq, opts ...grpc.CallOption) (*ListRoomsRep, error) {
	out := new(ListRoomsRep)
	err := c.cc.Invoke(ctx, "/hypercards.Whiteboard/ListRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) ListRoomMembers(ctx context.Context, in *ListRoomMembersReq, opts ...grpc.CallOption) (*ListRoomMembersRep, error) {
	out := new(ListRoomMembersRep)
	err := c.cc.Invoke(ctx, "/hypercards.Whiteboard/ListRoomMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhiteboardServer is the server API for Whiteboard service.
type WhiteboardServer interface {
	// RecvEvents listens to new events from others for a given room.
	// Events are sent using the SendEvent call.
	// A user never receives their own events.
	// When stream is closed, other users of the room should receive a disconnection event.
	RecvEvents(*RecvEventsReq, Whiteboard_RecvEventsServer) error
	// SendEvent publishes a user's event, which then gets routed to zero or more rooms.
	SendEvent(context.Context, *SendEventReq) (*SendEventRep, error)
	// ListRooms returns a paginated list of rooms.
	ListRooms(context.Context, *ListRoomsReq) (*ListRoomsRep, error)
	// ListRoomMembers returns a paginated list of room members.
	ListRoomMembers(context.Context, *ListRoomMembersReq) (*ListRoomMembersRep, error)
}

func RegisterWhiteboardServer(s *grpc.Server, srv WhiteboardServer) {
	s.RegisterService(&_Whiteboard_serviceDesc, srv)
}

func _Whiteboard_RecvEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RecvEventsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhiteboardServer).RecvEvents(m, &whiteboardRecvEventsServer{stream})
}

type Whiteboard_RecvEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type whiteboardRecvEventsServer struct {
	grpc.ServerStream
}

func (x *whiteboardRecvEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Whiteboard_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypercards.Whiteboard/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).SendEvent(ctx, req.(*SendEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypercards.Whiteboard/ListRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).ListRooms(ctx, req.(*ListRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_ListRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).ListRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypercards.Whiteboard/ListRoomMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).ListRoomMembers(ctx, req.(*ListRoomMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Whiteboard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypercards.Whiteboard",
	HandlerType: (*WhiteboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _Whiteboard_SendEvent_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _Whiteboard_ListRooms_Handler,
		},
		{
			MethodName: "ListRoomMembers",
			Handler:    _Whiteboard_ListRoomMembers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecvEvents",
			Handler:       _Whiteboard_RecvEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "marauder/proto/hypercard/whiteboard.proto",
}

// ScreenSharingClient is the client API for ScreenSharing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenSharingClient interface {
	// ScreenSharing streams the compressed canvas every Ns or after each windows of Ns
	//at the client's initiative
	SendScreen(ctx context.Context, in *SendScreenReq, opts ...grpc.CallOption) (*SendScreenRep, error)
	// RecvScreen gets the last compressed canvas
	RecvScreen(ctx context.Context, in *RecvScreenReq, opts ...grpc.CallOption) (*RecvScreenRep, error)
}

type screenSharingClient struct {
	cc *grpc.ClientConn
}

func NewScreenSharingClient(cc *grpc.ClientConn) ScreenSharingClient {
	return &screenSharingClient{cc}
}

func (c *screenSharingClient) SendScreen(ctx context.Context, in *SendScreenReq, opts ...grpc.CallOption) (*SendScreenRep, error) {
	out := new(SendScreenRep)
	err := c.cc.Invoke(ctx, "/hypercards.ScreenSharing/SendScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenSharingClient) RecvScreen(ctx context.Context, in *RecvScreenReq, opts ...grpc.CallOption) (*RecvScreenRep, error) {
	out := new(RecvScreenRep)
	err := c.cc.Invoke(ctx, "/hypercards.ScreenSharing/RecvScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenSharingServer is the server API for ScreenSharing service.
type ScreenSharingServer interface {
	// ScreenSharing streams the compressed canvas every Ns or after each windows of Ns
	//at the client's initiative
	SendScreen(context.Context, *SendScreenReq) (*SendScreenRep, error)
	// RecvScreen gets the last compressed canvas
	RecvScreen(context.Context, *RecvScreenReq) (*RecvScreenRep, error)
}

func RegisterScreenSharingServer(s *grpc.Server, srv ScreenSharingServer) {
	s.RegisterService(&_ScreenSharing_serviceDesc, srv)
}

func _ScreenSharing_SendScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendScreenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenSharingServer).SendScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypercards.ScreenSharing/SendScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenSharingServer).SendScreen(ctx, req.(*SendScreenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenSharing_RecvScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvScreenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenSharingServer).RecvScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypercards.ScreenSharing/RecvScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenSharingServer).RecvScreen(ctx, req.(*RecvScreenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenSharing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypercards.ScreenSharing",
	HandlerType: (*ScreenSharingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendScreen",
			Handler:    _ScreenSharing_SendScreen_Handler,
		},
		{
			MethodName: "RecvScreen",
			Handler:    _ScreenSharing_RecvScreen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marauder/proto/hypercard/whiteboard.proto",
}
