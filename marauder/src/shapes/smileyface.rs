extern crate libremarkable;
use libremarkable::framebuffer::common::*;

use std::time::Duration;

use crate::strokes::*;

pub fn smileyface(c: color, step: Duration) -> Strokes {
    let mut left_eye = Stroke::default();
    left_eye.set_points_and_pressure(&[
        ((1167.1279, 780.51337).into(), 1978),
        ((1166.9495, 780.60266).into(), 2167),
        ((1166.8601, 780.69196).into(), 2458),
        ((1166.9495, 780.60266).into(), 2725),
        ((1166.9495, 780.51337).into(), 2842),
        ((1166.9495, 780.51337).into(), 2839),
        ((1167.0387, 780.51337).into(), 2765),
        ((1167.1279, 780.51337).into(), 2603),
        ((1167.2173, 780.60266).into(), 2424),
        ((1167.5745, 780.69196).into(), 2256),
        ((1168.3779, 780.78125).into(), 2029),
        ((1169.2709, 781.0491).into(), 1709),
        ((1170.1637, 781.22766).into(), 1490),
        ((1171.2351, 781.31696).into(), 1441),
        ((1171.9493, 782.0312).into(), 916),
        ((1173.0208, 782.1205).into(), 10),
    ]);
    // (0.8312877, 0.056030896) @0.030182345 /(0.99696344,0.05035477)
    // (0.8311606, 0.056113575) @0.0330663 /(0.99696344,0.05035477)
    // (0.83109695, 0.056196254) @0.037506677 /(0.99696344,0.05035477)
    // (0.8311606, 0.056113575) @0.041580833 /(0.99696344,0.05035477)
    // (0.8311606, 0.056030896) @0.04336614 /(0.99696344,0.05035477)
    // (0.8311606, 0.056030896) @0.04332036 /(0.99696344,0.05035477)
    // (0.83122414, 0.056030896) @0.042191196 /(0.99696344,0.05035477)
    // (0.8312877, 0.056030896) @0.039719235 /(0.99696344,0.05035477)
    // (0.83135134, 0.056113575) @0.03698787 /(0.99696344,0.05035477)
    // (0.83160573, 0.056196254) @0.034424353 /(0.99696344,0.05035477)
    // (0.832178, 0.056278937) @0.030960556 /(0.99696344,0.05035477)
    // (0.83281404, 0.056526918) @0.02607767 /(0.99696344,0.05035477)
    // (0.8334499, 0.05669228) @0.022735942 /(0.99696344,0.05035477)
    // (0.834213, 0.05677496) @0.02198825 /(0.99696344,0.05035477)
    // (0.83472174, 0.057436287) @0.013977264 /(0.99696344,0.05035477)
    // (0.83548486, 0.057518966) @0.00015259022 /(0.99696344,0.05035477)

    let mut right_eye = Stroke::default();
    right_eye.set_points_and_pressure(&[
        ((1183.6456, 784.174).into(), 1434),
        ((1183.8242, 784.0847).into(), 1502),
        ((1184.1814, 783.7276).into(), 1742),
        ((1184.1814, 783.549).into(), 2113),
        ((1184.1814, 783.4597).into(), 2402),
        ((1184.2706, 783.3705).into(), 2544),
        ((1184.3599, 783.2812).into(), 2609),
        ((1184.3599, 783.1919).into(), 2640),
        ((1184.4492, 783.0133).into(), 2650),
        ((1184.6278, 782.924).into(), 2638),
        ((1184.8956, 782.8348).into(), 2599),
        ((1185.0742, 782.6562).into(), 2532),
        ((1185.4313, 782.5669).into(), 2403),
        ((1185.8777, 782.2991).into(), 2113),
        ((1186.4135, 782.1205).into(), 1683),
        ((1185.7885, 783.0133).into(), 1229),
        ((1186.5027, 782.924).into(), 7),
    ]);
    // (0.84305245, 0.05942038) @0.021881437 /(0,0.044251163)
    // (0.84317964, 0.0593377) @0.022919051 /(0,0.044251163)
    // (0.84343404, 0.059007037) @0.026581217 /(0,0.044251163)
    // (0.84343404, 0.058841676) @0.032242313 /(0,0.044251163)
    // (0.84343404, 0.058758996) @0.03665217 /(0,0.044251163)
    // (0.8434976, 0.058676373) @0.03881895 /(0,0.044251163)
    // (0.8435612, 0.058593694) @0.039810788 /(0,0.044251163)
    // (0.8435612, 0.058511015) @0.040283818 /(0,0.044251163)
    // (0.8436248, 0.058345653) @0.04043641 /(0,0.044251163)
    // (0.843752, 0.058262974) @0.0402533 /(0,0.044251163)
    // (0.84394276, 0.05818035) @0.039658196 /(0,0.044251163)
    // (0.84406996, 0.05801499) @0.038635843 /(0,0.044251163)
    // (0.8443243, 0.05793231) @0.03666743 /(0,0.044251163)
    // (0.8446422, 0.057684325) @0.032242313 /(0,0.044251163)
    // (0.8450238, 0.057518966) @0.025680933 /(0,0.044251163)
    // (0.8445787, 0.058345653) @0.018753339 /(0,0.044251163)
    // (0.8450874, 0.058262974) @0.00010681315 /(0,0.044251163)

    let mut smile = Stroke::default();
    smile.set_points_and_pressure(&[
        ((1166.0565, 794.0844).into(), 1298),
        ((1166.1459, 793.9952).into(), 1350),
        ((1166.2351, 793.8166).into(), 1389),
        ((1166.2351, 793.7273).into(), 1406),
        ((1166.1459, 793.4595).into(), 1417),
        ((1166.1459, 793.3702).into(), 1430),
        ((1166.1459, 793.3702).into(), 1452),
        ((1166.0565, 793.3702).into(), 1497),
        ((1165.9673, 793.4595).into(), 1574),
        ((1165.9673, 793.4595).into(), 1690),
        ((1165.9673, 793.5487).into(), 1838),
        ((1165.878, 793.5487).into(), 1969),
        ((1165.7887, 793.7273).into(), 2036),
        ((1165.6995, 793.9952).into(), 2052),
        ((1165.5209, 794.1737).into(), 2056),
        ((1165.4315, 794.4416).into(), 2061),
        ((1165.3423, 794.7987).into(), 2061),
        ((1165.3423, 795.1558).into(), 2051),
        ((1165.253, 795.51294).into(), 2033),
        ((1165.1637, 795.95935).into(), 2016),
        ((1165.1637, 796.3165).into(), 2005),
        ((1165.253, 796.67365).into(), 1999),
        ((1165.253, 796.94147).into(), 1994),
        ((1165.4315, 797.20935).into(), 1996),
        ((1165.6101, 797.56647).into(), 1992),
        ((1165.6995, 797.74506).into(), 1982),
        ((1165.9673, 798.0129).into(), 1988),
        ((1166.2351, 798.37).into(), 2016),
        ((1166.6815, 798.81647).into(), 2052),
        ((1167.4851, 799.3521).into(), 2084),
        ((1168.1101, 799.7986).into(), 2109),
        ((1168.8243, 800.1557).into(), 2124),
        ((1169.4493, 800.5128).into(), 2130),
        ((1170.2529, 800.78064).into(), 2125),
        ((1171.1458, 800.9592).into(), 2114),
        ((1171.9493, 801.0485).into(), 2110),
        ((1172.9315, 801.1378).into(), 2112),
        ((1174.0029, 801.0485).into(), 2108),
        ((1175.1636, 800.78064).into(), 2096),
        ((1176.3243, 800.4235).into(), 2089),
        ((1177.485, 799.9771).into(), 2084),
        ((1178.6458, 799.4414).into(), 2099),
        ((1179.8064, 798.7272).into(), 2121),
        ((1180.8778, 797.9236).into(), 2138),
        ((1181.86, 797.20935).into(), 2149),
        ((1182.842, 796.4058).into(), 2163),
        ((1184.0028, 795.60223).into(), 2183),
        ((1184.717, 794.888).into(), 2204),
        ((1185.1635, 794.3523).into(), 2225),
        ((1185.6992, 793.8166).into(), 2224),
        ((1185.967, 793.3702).into(), 2221),
        ((1186.1456, 793.1023).into(), 2230),
        ((1186.3242, 793.01306).into(), 2243),
        ((1186.3242, 792.8345).into(), 2267),
        ((1186.3242, 792.6559).into(), 2309),
        ((1186.2349, 792.47736).into(), 2343),
        ((1186.2349, 792.2095).into(), 2358),
        ((1186.2349, 791.85236).into(), 2355),
        ((1186.1456, 791.49524).into(), 2321),
        ((1186.1456, 791.13806).into(), 2244),
        ((1186.1456, 790.95953).into(), 2102),
        ((1186.1456, 790.87024).into(), 1860),
        ((1186.0563, 790.87024).into(), 1588),
        ((1185.967, 790.95953).into(), 1444),
        ((1186.8599, 790.24524).into(), 258),
    ]);
    // (0.83052456, 0.068596676) @0.01980621 /(0.0030518044,0.053406578)
    // (0.8305882, 0.06851406) @0.02059968 /(0.0030518044,0.053406578)
    // (0.83065176, 0.06834869) @0.021194782 /(0.0030518044,0.053406578)
    // (0.83065176, 0.06826601) @0.021454185 /(0.0030518044,0.053406578)
    // (0.8305882, 0.06801803) @0.021622034 /(0.0030518044,0.053406578)
    // (0.8305882, 0.06793535) @0.021820402 /(0.0030518044,0.053406578)
    // (0.8305882, 0.06793535) @0.0221561 /(0.0030518044,0.053406578)
    // (0.83052456, 0.06793535) @0.022842756 /(0.0030518044,0.053406578)
    // (0.830461, 0.06801803) @0.0240177 /(0.0030518044,0.053406578)
    // (0.830461, 0.06801803) @0.025787747 /(0.0030518044,0.053406578)
    // (0.830461, 0.06810065) @0.028046083 /(0.0030518044,0.053406578)
    // (0.8303975, 0.06810065) @0.030045014 /(0.0030518044,0.053406578)
    // (0.8303338, 0.06826601) @0.03106737 /(0.0030518044,0.053406578)
    // (0.8302703, 0.06851406) @0.031311512 /(0.0030518044,0.053406578)
    // (0.8301431, 0.068679355) @0.03137255 /(0.0030518044,0.053406578)
    // (0.83007944, 0.0689274) @0.031448845 /(0.0030518044,0.053406578)
    // (0.8300159, 0.069258064) @0.031448845 /(0.0030518044,0.053406578)
    // (0.8300159, 0.06958873) @0.031296253 /(0.0030518044,0.053406578)
    // (0.8299523, 0.069919385) @0.031021591 /(0.0030518044,0.053406578)
    // (0.8298887, 0.07033273) @0.030762188 /(0.0030518044,0.053406578)
    // (0.8298887, 0.07066345) @0.03059434 /(0.0030518044,0.053406578)
    // (0.8299523, 0.07099412) @0.030502785 /(0.0030518044,0.053406578)
    // (0.8299523, 0.0712421) @0.03042649 /(0.0030518044,0.053406578)
    // (0.83007944, 0.07149014) @0.030457009 /(0.0030518044,0.053406578)
    // (0.83020663, 0.0718208) @0.030395972 /(0.0030518044,0.053406578)
    // (0.8302703, 0.07198616) @0.030243382 /(0.0030518044,0.053406578)
    // (0.830461, 0.07223415) @0.030334936 /(0.0030518044,0.053406578)
    // (0.83065176, 0.07256481) @0.030762188 /(0.0030518044,0.053406578)
    // (0.83096975, 0.07297821) @0.031311512 /(0.0030518044,0.053406578)
    // (0.8315421, 0.073474176) @0.0317998 /(0.0030518044,0.053406578)
    // (0.83198726, 0.07388758) @0.032181278 /(0.0030518044,0.053406578)
    // (0.832496, 0.07421824) @0.032410163 /(0.0030518044,0.053406578)
    // (0.8329411, 0.07454891) @0.032501716 /(0.0030518044,0.053406578)
    // (0.8335135, 0.074796885) @0.032425422 /(0.0030518044,0.053406578)
    // (0.8341494, 0.07496225) @0.03225757 /(0.0030518044,0.053406578)
    // (0.83472174, 0.07504493) @0.032196537 /(0.0030518044,0.053406578)
    // (0.8354213, 0.07512761) @0.032227054 /(0.0030518044,0.053406578)
    // (0.83618444, 0.07504493) @0.03216602 /(0.0030518044,0.053406578)
    // (0.8370111, 0.074796885) @0.03198291 /(0.0030518044,0.053406578)
    // (0.8378379, 0.07446623) @0.0318761 /(0.0030518044,0.053406578)
    // (0.83866453, 0.07405288) @0.0317998 /(0.0030518044,0.053406578)
    // (0.83949125, 0.073556855) @0.032028686 /(0.0030518044,0.05035477)
    // (0.84031796, 0.07289553) @0.032364387 /(0.0030518044,0.05035477)
    // (0.8410811, 0.07215147) @0.03262379 /(0.0030518044,0.05035477)
    // (0.8417806, 0.07149014) @0.032791637 /(0.0030518044,0.05035477)
    // (0.84248006, 0.07074613) @0.033005264 /(0.0030518044,0.05035477)
    // (0.84330684, 0.07000207) @0.033310443 /(0.0030518044,0.05035477)
    // (0.84381557, 0.06934074) @0.033630885 /(0.0030518044,0.05035477)
    // (0.8441335, 0.06884472) @0.033951323 /(0.0030518044,0.05035477)
    // (0.8445151, 0.06834869) @0.033936065 /(0.0030518044,0.05035477)
    // (0.8447059, 0.06793535) @0.03389029 /(0.0030518044,0.05035477)
    // (0.8448331, 0.06768731) @0.034027617 /(0.0030518044,0.05035477)
    // (0.8449603, 0.06760468) @0.034225985 /(0.0030518044,0.05035477)
    // (0.8449603, 0.067439325) @0.034592204 /(0.0030518044,0.05035477)
    // (0.8449603, 0.06727397) @0.03523308 /(0.0030518044,0.05035477)
    // (0.8448966, 0.06710866) @0.035751887 /(0.0030518044,0.05035477)
    // (0.8448966, 0.06686062) @0.035980772 /(0.0030518044,0.05035477)
    // (0.8448966, 0.06652996) @0.035934996 /(0.0030518044,0.05035477)
    // (0.8448331, 0.066199295) @0.03541619 /(0.0030518044,0.05035477)
    // (0.8448331, 0.06586858) @0.034241244 /(0.0030518044,0.04882887)
    // (0.8448331, 0.06570327) @0.032074463 /(0.0030518044,0.04882887)
    // (0.8448331, 0.065620594) @0.028381782 /(0.0030518044,0.04882887)
    // (0.8447694, 0.065620594) @0.024231328 /(0.0030518044,0.04882887)
    // (0.8447059, 0.06570327) @0.022034029 /(0.0030518044,0.04882887)
    // (0.8453418, 0.065041885) @0.0039368276 /(0.0030518044,0.04882887)

    left_eye.set_color(c);
    right_eye.set_color(c);
    smile.set_color(c);

    left_eye.set_step(step);
    right_eye.set_step(step);
    smile.set_step(step);

    vec![left_eye, right_eye, smile].into()
}
