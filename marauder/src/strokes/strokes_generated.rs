// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod marauder {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
#[allow(unused_imports, dead_code)]
pub mod strokes {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct Vec2f32, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Vec2f32 {
  x_: f32,
  y_: f32,
} // pub struct Vec2f32
impl flatbuffers::SafeSliceAccess for Vec2f32 {}
impl<'a> flatbuffers::Follow<'a> for Vec2f32 {
  type Inner = &'a Vec2f32;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2f32>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2f32 {
  type Inner = &'a Vec2f32;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2f32>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2f32 {
    type Output = Vec2f32;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Vec2f32 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Vec2f32 {
    type Output = Vec2f32;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Vec2f32 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Vec2f32 {
  pub fn new<'a>(_x: f32, _y: f32) -> Self {
    Vec2f32 {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> f32 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> f32 {
    self.y_.from_little_endian()
  }
}

// struct Vec2u16, aligned to 2
#[repr(C, align(2))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Vec2u16 {
  x_: u16,
  y_: u16,
} // pub struct Vec2u16
impl flatbuffers::SafeSliceAccess for Vec2u16 {}
impl<'a> flatbuffers::Follow<'a> for Vec2u16 {
  type Inner = &'a Vec2u16;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2u16>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2u16 {
  type Inner = &'a Vec2u16;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2u16>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2u16 {
    type Output = Vec2u16;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Vec2u16 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Vec2u16 {
    type Output = Vec2u16;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Vec2u16 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Vec2u16 {
  pub fn new<'a>(_x: u16, _y: u16) -> Self {
    Vec2u16 {
      x_: _x.to_little_endian(),
      y_: _y.to_little_endian(),

    }
  }
  pub fn x<'a>(&'a self) -> u16 {
    self.x_.from_little_endian()
  }
  pub fn y<'a>(&'a self) -> u16 {
    self.y_.from_little_endian()
  }
}

// struct NormPoint2, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct NormPoint2 {
  position_: Vec2f32,
  pressure_: f32,
  tilt_: Vec2f32,
} // pub struct NormPoint2
impl flatbuffers::SafeSliceAccess for NormPoint2 {}
impl<'a> flatbuffers::Follow<'a> for NormPoint2 {
  type Inner = &'a NormPoint2;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a NormPoint2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a NormPoint2 {
  type Inner = &'a NormPoint2;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<NormPoint2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for NormPoint2 {
    type Output = NormPoint2;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const NormPoint2 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b NormPoint2 {
    type Output = NormPoint2;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const NormPoint2 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl NormPoint2 {
  pub fn new<'a>(_position: &'a Vec2f32, _pressure: f32, _tilt: &'a Vec2f32) -> Self {
    NormPoint2 {
      position_: *_position,
      pressure_: _pressure.to_little_endian(),
      tilt_: *_tilt,

    }
  }
  pub fn position<'a>(&'a self) -> &'a Vec2f32 {
    &self.position_
  }
  pub fn pressure<'a>(&'a self) -> f32 {
    self.pressure_.from_little_endian()
  }
  pub fn tilt<'a>(&'a self) -> &'a Vec2f32 {
    &self.tilt_
  }
}

// struct Point2, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Point2 {
  position_: Vec2f32,
  pressure_: u16,
  tilt_: Vec2u16,
  padding0__: u16,
} // pub struct Point2
impl flatbuffers::SafeSliceAccess for Point2 {}
impl<'a> flatbuffers::Follow<'a> for Point2 {
  type Inner = &'a Point2;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Point2>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Point2 {
  type Inner = &'a Point2;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Point2>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Point2 {
    type Output = Point2;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Point2 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Point2 {
    type Output = Point2;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Point2 as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Point2 {
  pub fn new<'a>(_position: &'a Vec2f32, _pressure: u16, _tilt: &'a Vec2u16) -> Self {
    Point2 {
      position_: *_position,
      pressure_: _pressure.to_little_endian(),
      tilt_: *_tilt,

      padding0__: 0,
    }
  }
  pub fn position<'a>(&'a self) -> &'a Vec2f32 {
    &self.position_
  }
  pub fn pressure<'a>(&'a self) -> u16 {
    self.pressure_.from_little_endian()
  }
  pub fn tilt<'a>(&'a self) -> &'a Vec2u16 {
    &self.tilt_
  }
}

pub enum StrokeOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Stroke<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Stroke<'a> {
    type Inner = Stroke<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Stroke<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Stroke {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StrokeArgs<'args>) -> flatbuffers::WIPOffset<Stroke<'bldr>> {
      let mut builder = StrokeBuilder::new(_fbb);
      if let Some(x) = args.normpoints { builder.add_normpoints(x); }
      if let Some(x) = args.points { builder.add_points(x); }
      builder.add_pause_ms(args.pause_ms);
      builder.add_tip_diameter(args.tip_diameter);
      builder.add_shade(args.shade);
      builder.finish()
    }

    pub const VT_SHADE: flatbuffers::VOffsetT = 4;
    pub const VT_TIP_DIAMETER: flatbuffers::VOffsetT = 6;
    pub const VT_PAUSE_MS: flatbuffers::VOffsetT = 8;
    pub const VT_POINTS: flatbuffers::VOffsetT = 10;
    pub const VT_NORMPOINTS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn shade(&self) -> u8 {
    self._tab.get::<u8>(Stroke::VT_SHADE, Some(0)).unwrap()
  }
  #[inline]
  pub fn tip_diameter(&self) -> u16 {
    self._tab.get::<u16>(Stroke::VT_TIP_DIAMETER, Some(2)).unwrap()
  }
  #[inline]
  pub fn pause_ms(&self) -> u16 {
    self._tab.get::<u16>(Stroke::VT_PAUSE_MS, Some(0)).unwrap()
  }
  #[inline]
  pub fn points(&self) -> Option<&'a [Point2]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<Point2>>>(Stroke::VT_POINTS, None).map(|v| v.safe_slice() )
  }
  #[inline]
  pub fn normpoints(&self) -> Option<&'a [NormPoint2]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<NormPoint2>>>(Stroke::VT_NORMPOINTS, None).map(|v| v.safe_slice() )
  }
}

pub struct StrokeArgs<'a> {
    pub shade: u8,
    pub tip_diameter: u16,
    pub pause_ms: u16,
    pub points: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , Point2>>>,
    pub normpoints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , NormPoint2>>>,
}
impl<'a> Default for StrokeArgs<'a> {
    #[inline]
    fn default() -> Self {
        StrokeArgs {
            shade: 0,
            tip_diameter: 2,
            pause_ms: 0,
            points: None,
            normpoints: None,
        }
    }
}
pub struct StrokeBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StrokeBuilder<'a, 'b> {
  #[inline]
  pub fn add_shade(&mut self, shade: u8) {
    self.fbb_.push_slot::<u8>(Stroke::VT_SHADE, shade, 0);
  }
  #[inline]
  pub fn add_tip_diameter(&mut self, tip_diameter: u16) {
    self.fbb_.push_slot::<u16>(Stroke::VT_TIP_DIAMETER, tip_diameter, 2);
  }
  #[inline]
  pub fn add_pause_ms(&mut self, pause_ms: u16) {
    self.fbb_.push_slot::<u16>(Stroke::VT_PAUSE_MS, pause_ms, 0);
  }
  #[inline]
  pub fn add_points(&mut self, points: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Point2>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stroke::VT_POINTS, points);
  }
  #[inline]
  pub fn add_normpoints(&mut self, normpoints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , NormPoint2>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stroke::VT_NORMPOINTS, normpoints);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StrokeBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StrokeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Stroke<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum StrokesOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Strokes<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Strokes<'a> {
    type Inner = Strokes<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Strokes<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Strokes {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args StrokesArgs<'args>) -> flatbuffers::WIPOffset<Strokes<'bldr>> {
      let mut builder = StrokesBuilder::new(_fbb);
      builder.add_region_height(args.region_height);
      builder.add_region_width(args.region_width);
      if let Some(x) = args.strokes { builder.add_strokes(x); }
      builder.finish()
    }

    pub const VT_STROKES: flatbuffers::VOffsetT = 4;
    pub const VT_REGION_WIDTH: flatbuffers::VOffsetT = 6;
    pub const VT_REGION_HEIGHT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn strokes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Stroke<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Stroke<'a>>>>>(Strokes::VT_STROKES, None)
  }
  #[inline]
  pub fn region_width(&self) -> u32 {
    self._tab.get::<u32>(Strokes::VT_REGION_WIDTH, Some(0)).unwrap()
  }
  #[inline]
  pub fn region_height(&self) -> u32 {
    self._tab.get::<u32>(Strokes::VT_REGION_HEIGHT, Some(0)).unwrap()
  }
}

pub struct StrokesArgs<'a> {
    pub strokes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Stroke<'a >>>>>,
    pub region_width: u32,
    pub region_height: u32,
}
impl<'a> Default for StrokesArgs<'a> {
    #[inline]
    fn default() -> Self {
        StrokesArgs {
            strokes: None,
            region_width: 0,
            region_height: 0,
        }
    }
}
pub struct StrokesBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StrokesBuilder<'a, 'b> {
  #[inline]
  pub fn add_strokes(&mut self, strokes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Stroke<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Strokes::VT_STROKES, strokes);
  }
  #[inline]
  pub fn add_region_width(&mut self, region_width: u32) {
    self.fbb_.push_slot::<u32>(Strokes::VT_REGION_WIDTH, region_width, 0);
  }
  #[inline]
  pub fn add_region_height(&mut self, region_height: u32) {
    self.fbb_.push_slot::<u32>(Strokes::VT_REGION_HEIGHT, region_height, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StrokesBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StrokesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Strokes<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_strokes<'a>(buf: &'a [u8]) -> Strokes<'a> {
  flatbuffers::get_root::<Strokes<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_strokes<'a>(buf: &'a [u8]) -> Strokes<'a> {
  flatbuffers::get_size_prefixed_root::<Strokes<'a>>(buf)
}

#[inline]
pub fn finish_strokes_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Strokes<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_strokes_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Strokes<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod strokes
}  // pub mod marauder

